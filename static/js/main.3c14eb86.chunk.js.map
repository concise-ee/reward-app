{"version":3,"sources":["logo.svg","shared/data.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js","components/Home/Home.module.scss"],"names":["items","id","title","isInCloud","isCompleted","type","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","width","emptyItems","initializeLocalStorage","localStorage","setItem","JSON","stringify","getItem","parse","console","log","Home","removeItem","useState","Array","from","droppableId","droppableLists","setDroppableLists","onDragEnd","result","destination","source","droppableListToUpdate","find","list","droppableListToUpdateIndex","findIndex","reorderedList","startIndex","endIndex","splice","removed","reorder","index","clonedDroppableLists","droppableListsClone","sourceDroppableList","sourceDroppableListIndex","destinationDroppableList","destinationDroppableListIndex","itemToMove","item","toString","draggableId","filter","className","styles","paper","provided","snapshot","droppableProps","ref","innerRef","style","map","draggableProps","dragHandleProps","placeholder","color","root","Grid","container","spacing","xs","gridItem","Paper","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3c14eb86.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const items = {\"items\": [\n    {\n        id: 1,\n        title: 'Stay sane',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'mit',\n    },\n    {\n        id: 2,\n        title: 'Prevent burnout',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'mit',\n    },\n    {\n        id: 3,\n        title: 'Eat lunch',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'todo',\n    },\n    {\n        id: 4,\n        title: 'Take breaks',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'todo',\n    },\n    {\n        id: 5,\n        title: 'Powernap',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'todo',\n    },\n    {\n        id: 6,\n        title: 'Go for a walk',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'todo',\n    },\n    {\n        id: 7,\n        title: 'Ski',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'plan',\n    },\n    {\n        id: 8,\n        title: 'Snowball fight/lumes√µda',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'plan',\n    },\n    {\n        id: 9,\n        title: 'Cancel meetings after 6pm',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'plan',\n    },\n    {\n        id: 10,\n        title: 'Walking-meetings',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'plan',\n    },\n    {\n        id: 11,\n        title: 'Ask for raise',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'plan',\n    },\n    {\n        id: 12,\n        title: 'Learn estonian',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'plan',\n    },\n    {\n        id: 13,\n        title: 'Alcohol',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'reward',\n    },\n    {\n        id: 14,\n        title: 'Sauna',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'reward',\n    },\n    {\n        id: 15,\n        title: 'Order pizza',\n        isInCloud: true,\n        isCompleted: false,\n        type: 'reward',\n    },\n]}\n\nexport default items;","import React, {useState} from 'react';\nimport '@atlaskit/css-reset';\nimport PropTypes from 'prop-types';\nimport styles from './Home.module.scss';\nimport items from \"../../shared/data\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {DragDropContext, Draggable, Droppable} from \"react-beautiful-dnd\";\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\",\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    padding: grid,\n    width: 250\n});\n\n\n\nconst emptyItems = {\"items\": []}\n\nconst initializeLocalStorage = () => {\n    localStorage.setItem('droppableCloudList', JSON.stringify(items));\n    localStorage.setItem('droppableMitList', JSON.stringify(emptyItems));\n    localStorage.setItem('droppableTodoList', JSON.stringify(emptyItems));\n    localStorage.setItem('droppablePlanList', JSON.stringify(emptyItems));\n    localStorage.setItem('droppableRewardList', JSON.stringify(emptyItems));\n    localStorage.setItem('droppableCompleted', JSON.stringify(emptyItems));\n}\n\nconst resetLocalStorage = () => {\n    localStorage.removeItem('droppableCloudList');\n    localStorage.removeItem('droppableMitList');\n    localStorage.removeItem('droppableTodoList');\n    localStorage.removeItem('droppablePlanList');\n    localStorage.removeItem('droppableRewardList');\n    localStorage.removeItem('droppable');\n}\n\nlet droppableCloudList;\nif(!localStorage.getItem('droppableCloudList')){\n    console.log('Initializing local storage...');\n    initializeLocalStorage();\n    droppableCloudList = JSON.stringify(items).items;\n} else {\n    droppableCloudList = JSON.parse(localStorage.getItem('droppableCloudList')).items;\n}\n\nconst initializeDroppableLists = () => {\n    return Array.from([\n        {\n            droppableId: 'droppableCloudList',\n            items: JSON.parse(localStorage.getItem('droppableCloudList')).items\n        },\n        {\n            droppableId: 'droppableMitList',\n            items: JSON.parse(localStorage.getItem('droppableMitList')).items\n        },\n        {\n            droppableId: 'droppableTodoList',\n            items: JSON.parse(localStorage.getItem('droppableTodoList')).items\n        },\n        {\n            droppableId: 'droppablePlanList',\n            items: JSON.parse(localStorage.getItem('droppablePlanList')).items\n        },\n        {\n            droppableId: 'droppableRewardList',\n            items: JSON.parse(localStorage.getItem('droppableRewardList')).items\n        },\n        {\n            droppableId: 'droppableCompleted',\n            items: JSON.parse(localStorage.getItem('droppableCompleted')).items\n        }\n    ]);\n}\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n\nconst Home = () => {\n    resetLocalStorage();\n    initializeLocalStorage();\n    const[droppableLists, setDroppableLists] = useState(initializeDroppableLists());\n    return (\n        <div>\n            <DragDropContext onDragEnd={(result) => {\n                if (!result.destination) return;\n                else if (result.source.droppableId === result.destination.droppableId) {\n                    const droppableListToUpdate = droppableLists.find(list => list.droppableId === result.source.droppableId);\n                    const droppableListToUpdateIndex = droppableLists.findIndex(list => list.droppableId === result.source.droppableId);\n                    const reorderedList = reorder(droppableListToUpdate.items, result.source.index, result.destination.index);\n                    const clonedDroppableLists = droppableLists;\n                    clonedDroppableLists[droppableListToUpdateIndex].items = reorderedList;\n                    setDroppableLists(clonedDroppableLists);\n                } else {\n                    const droppableListsClone = droppableLists;\n                    const sourceDroppableList = droppableListsClone.find(list => list.droppableId === result.source.droppableId);\n                    const sourceDroppableListIndex = droppableListsClone.findIndex(list => list.droppableId === result.source.droppableId);\n                    const destinationDroppableList = droppableListsClone.find(list => list.droppableId === result.destination.droppableId);\n                    const destinationDroppableListIndex = droppableListsClone.findIndex(list => list.droppableId === result.destination.droppableId);\n                    const itemToMove = sourceDroppableList.items.find(item => item.id.toString() === result.draggableId);\n                    // filter out the item that is being moved\n                    sourceDroppableList.items = sourceDroppableList.items.filter(item => item.id.toString() !== itemToMove.id.toString());\n                    destinationDroppableList.items = [...destinationDroppableList.items, itemToMove];\n                    droppableListsClone[sourceDroppableListIndex] = sourceDroppableList;\n                    droppableListsClone[destinationDroppableListIndex] = destinationDroppableList;\n                    setDroppableLists(droppableListsClone);\n                }\n            }}>\n            <div className={styles.paper}>\n            <Droppable droppableId='droppableCloudList'>\n                {(provided, snapshot) => (\n                    <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={getListStyle(snapshot.isDraggingOver)}\n                    >\n                        <h5>Cloud</h5>\n                        {droppableLists.find(list => list.droppableId === 'droppableCloudList').items.map((item, index) => (\n                            <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                                {(provided, snapshot) => (\n                                    <div\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                        style={getItemStyle(\n                                            snapshot.isDragging,\n                                            provided.draggableProps.style\n                                        )}\n                                    >\n                                        {item.title}\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n            </div>\n            <hr style={{color: 'green'}}/>\n                <div className={styles.root}>\n                    <Grid container spacing={0}>\n                        <Grid item xs={6} className={styles.gridItem}>\n                            <Paper className={styles.paper}>\n                                <Droppable droppableId='droppableMitList'>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            {...provided.droppableProps}\n                                            ref={provided.innerRef}\n                                            style={getListStyle(snapshot.isDraggingOver)}\n                                        >\n                                            <h5>MIT</h5>\n                                            {droppableLists.find(list => list.droppableId === 'droppableMitList').items.map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <div\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                            style={getItemStyle(\n                                                                snapshot.isDragging,\n                                                                provided.draggableProps.style\n                                                            )}\n                                                        >\n                                                            {item.title}\n                                                        </div>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </div>\n                                    )}\n                                </Droppable>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={6} className={styles.gridItem}>\n                            <Paper className={styles.paper}>\n                                <Droppable droppableId='droppableTodoList'>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            {...provided.droppableProps}\n                                            ref={provided.innerRef}\n                                            style={getListStyle(snapshot.isDraggingOver)}\n                                        >\n                                            <h5>To-Do</h5>\n                                            {droppableLists.find(list => list.droppableId === 'droppableTodoList').items.map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <div\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                            style={getItemStyle(\n                                                                snapshot.isDragging,\n                                                                provided.draggableProps.style\n                                                            )}\n                                                        >\n                                                            {item.title}\n                                                        </div>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </div>\n                                    )}\n                                </Droppable>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={6} className={styles.gridItem}>\n                            <Paper className={styles.paper}>\n                                <Droppable droppableId='droppablePlanList'>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            {...provided.droppableProps}\n                                            ref={provided.innerRef}\n                                            style={getListStyle(snapshot.isDraggingOver)}\n                                        >\n                                            <h5>Plan</h5>\n                                            {droppableLists.find(list => list.droppableId === 'droppablePlanList').items.map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <div\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                            style={getItemStyle(\n                                                                snapshot.isDragging,\n                                                                provided.draggableProps.style\n                                                            )}\n                                                        >\n                                                            {item.title}\n                                                        </div>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </div>\n                                    )}\n                                </Droppable>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={6} className={styles.gridItem}>\n                            <Paper className={styles.paper}>\n                                <Droppable droppableId='droppableRewardList'>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            {...provided.droppableProps}\n                                            ref={provided.innerRef}\n                                            style={getListStyle(snapshot.isDraggingOver)}\n                                        >\n                                            <h5>Reward</h5>\n                                            {droppableLists.find(list => list.droppableId === 'droppableRewardList').items.map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <div\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                            style={getItemStyle(\n                                                                snapshot.isDragging,\n                                                                provided.draggableProps.style\n                                                            )}\n                                                        >\n                                                            {item.title}\n                                                        </div>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </div>\n                                    )}\n                                </Droppable>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                    <hr style={{color: 'green'}}/>\n                        <div className={styles.paper}>\n                            <Droppable droppableId='droppableCompleted'>\n                                {(provided, snapshot) => (\n                                    <div\n                                        {...provided.droppableProps}\n                                        ref={provided.innerRef}\n                                        style={getListStyle(snapshot.isDraggingOver)}\n                                        >\n                                            <h5>Completed!</h5>\n                                            {droppableLists.find(list => list.droppableId === 'droppableCompleted').items.map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <div\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                            style={getItemStyle(\n                                                            snapshot.isDragging,\n                                                            provided.draggableProps.style\n                                                        )}\n                                                    >\n                                        {item.title}\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n            </div>\n                </div>\n            </DragDropContext>\n        </div>\n    );\n}\n\nHome.propTypes = {};\n\nHome.defaultProps = {};\n\nexport default Home;\n","import logo from './logo.svg';\nimport './App.css';\nimport Home from \"./components/Home/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"Home_paper__2hE2F\",\"grid-item\":\"Home_grid-item__mpQMA\"};"],"sourceRoot":""}